{
    "data": "Derivative at a turning point is zero.",
    "goal": "**Core Principle:** The derivative of a function at a turning point is equal to zero, indicating a change in the direction of the function's slope.\n\n**Query:** Create a visualization to explain the concept that the derivative at a turning point is zero. The goal of this visualization is to illustrate the relationship between the slope of a function and its critical points, specifically focusing on how the change from increasing to decreasing (or vice versa) at these points results in a zero derivative. An effective visualization could be a layered graph that highlights the function's curve, annotating the points where the derivative equals zero, and incorporating directional arrows to indicate slope changes. This visualization should employ clear labels and color differentiation to enhance understanding of the cause-and-effect relationship between slope changes and critical points. \n\n**Educational Objectives:** The objective is to facilitate a deep and meaningful understanding of how a derivative of zero signifies a turning point in a function, helping students to not only identify these points in a graph but also understand their significance in the context of function behavior. The visual should aid learners in recognizing the sequences of slope changes and the underlying mathematical principles that govern these transitions. Additionally, by fostering this visual learning experience, students will be better equipped to apply these concepts in various mathematical contexts.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-3, 3, 400)\ny = x**3 - 3*x  # Function: y = x^3 - 3x\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, y, label='y = x\u00b3 - 3x', color='blue')\n\n# Calculate derivative\ndy_dx = 3*x**2 - 3\n\n# Identify turning points (where derivative is zero)\nturning_points_x = np.array([-1, 1])\nturning_points_y = turning_points_x**3 - 3*turning_points_x\n\n# Highlight turning points\nplt.scatter(turning_points_x, turning_points_y, color='red', zorder=5)\nfor (px, py) in zip(turning_points_x, turning_points_y):\n    plt.annotate(f'({px}, {py})', xy=(px, py), xytext=(px, py + 2),\n                 arrowprops=dict(facecolor='black', shrink=0.05),\n                 fontsize=10, color='black')\n\n# Add directional arrows for slope changes\nplt.annotate('', xy=(-1.5, (-1.5)**3 - 3*(-1.5)), xytext=(-2, (-2)**3 + 4),\n             arrowprops=dict(arrowstyle='->', color='green', lw=2))\nplt.annotate('', xy=(1.5, (1.5)**3 - 3*(1.5)), xytext=(2, (2)**3 - 5),\n             arrowprops=dict(arrowstyle='->', color='green', lw=2))\n\n# Highlight regions\nplt.fill_between(x, y, where=(x < -1), color='lightgray', alpha=0.5)\nplt.fill_between(x, y, where=(x > 1), color='lightgray', alpha=0.5)\n\n# Labels and title\nplt.title('Turning Points and Derivative Zero', fontsize=14)\nplt.xlabel('x', fontsize=12)\nplt.ylabel('y', fontsize=12)\nplt.axhline(0, color='black', lw=0.5, ls='--')\nplt.axvline(0, color='black', lw=0.5, ls='--')\nplt.legend(loc='upper left')\nplt.grid(True)\nplt.xlim(-3, 3)\nplt.ylim(-5, 5)\n```"
}