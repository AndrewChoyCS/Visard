{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Create a visualization to explain the concept of using gradient descent to find the minimum of a loss function.** The visualization should illustrate how the iterative algorithm adjusts the value of $\\theta$ based on the sign of the first derivative of the loss function. Key elements to include are: a graph depicting the loss function, its first derivative, and how adjustments in $\\theta$ move towards the minimum. Use an infographic style that distinguishes between undershooting and overshooting scenarios, clearly labeling the regions where the derivative is negative or positive. \n\nThe goal of this visualization is to clarify the relationship between the derivative of the function and the adjustments made in the guessing process. It will help learners understand not only the mechanics of gradient descent but also how iterative adjustments are guided by the slope of the loss function. By visually representing these concepts, learners will better grasp how the iterative algorithm effectively locates the minimum value, promoting their deeper understanding of optimization techniques in machine learning.\n\n**Objective:** Enable learners to accurately describe the iterative process of gradient descent and its reliance on the behavior of the derivative, enhancing their ability to apply these concepts in complex optimization scenarios in data science.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the loss function and its derivative\ndef loss_function(theta):\n    return (theta - 3) ** 2\n\ndef derivative_loss_function(theta):\n    return 2 * (theta - 3)\n\n# Generate theta values\ntheta_values = np.linspace(-2, 8, 400)\nloss_values = loss_function(theta_values)\nderivative_values = derivative_loss_function(theta_values)\n\n# Create the figure and axes\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# Plot the loss function\nax.plot(theta_values, loss_values, label='Loss Function', color='blue', linewidth=2)\n\n# Plot the first derivative\nax.plot(theta_values, derivative_values, label='First Derivative', color='red', linestyle='--', linewidth=2)\n\n# Highlight the minimum\nax.plot(3, loss_function(3), 'go', markersize=10)\nax.annotate('Minimum', xy=(3, loss_function(3)), xytext=(3.5, 20),\n             arrowprops=dict(facecolor='black', arrowstyle='->'), fontsize=12)\n\n# Add adjustments for theta\ninitial_theta = -2\ndelta_theta = 0.5\n\nfor i in range(4):\n    loss_at_theta = loss_function(initial_theta)\n    ax.plot(initial_theta, loss_at_theta, 'ro')  # Point on the loss function\n    ax.annotate(f'\u03b8={initial_theta:.2f}', xy=(initial_theta, loss_at_theta), \n                 xytext=(initial_theta + 1, loss_at_theta + 5),\n                 arrowprops=dict(facecolor='black', arrowstyle='->'))\n    gradient = derivative_loss_function(initial_theta)\n    initial_theta -= delta_theta * gradient  # Update theta\n\n# Shade areas for overshooting and undershooting\nax.fill_betweenx(y=np.linspace(0, 40, 10), x1=3, x2=5, color='orange', alpha=0.2, label='Overshooting Region')\nax.fill_betweenx(y=np.linspace(0, 40, 10), x1=1, x2=3, color='lightgreen', alpha=0.2, label='Undershooting Region')\n\n# Highlight the regions of positive and negative derivative\nax.axhline(0, color='grey', linewidth=0.5, linestyle='--')\nax.axvline(3, color='grey', linewidth=0.5, linestyle='--')\nax.annotate('Positive Derivative', xy=(5, 30), xytext=(4, 35), fontsize=12, color='red', weight='bold')\nax.annotate('Negative Derivative', xy=(1, 5), xytext=(1.5, 10), fontsize=12, color='red', weight='bold')\n\n# Formatting the plot\nax.set_title('Gradient Descent: Finding Minimum of Loss Function', fontsize=16)\nax.set_xlabel('\u03b8 (Parameter)', fontsize=14)\nax.set_ylabel('Loss Value', fontsize=14)\nax.legend()\nax.grid(True)\nplt.tight_layout()\n```"
}