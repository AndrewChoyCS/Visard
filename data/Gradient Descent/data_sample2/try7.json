{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "Create a visualization to explain the concept of **gradient descent** as an iterative optimization technique used to find the minimum value of a function. The goal of this visual representation is to clarify how adjusting guesses based on the sign of the derivative can lead to the optimal value of \\( \\theta \\). Specifically, it should illustrate the relationships between the function, its derivative, and how moving left or right on the graph affects the guess based on whether the derivative is negative or positive.\n\nAn effective style for this visualization could be a dynamic graph that includes both the function and its derivative, with labeled points indicating where the derivative equals zero. This can incorporate arrows showing the direction of movement (left or right) depending on the guess's relationship to the minimizing value. By visualizing these interactions, learners can gain a deeper understanding of the iterative process of gradient descent, emphasizing cause-and-effect relationships and the sequential nature of adjusting guesses.\n\nLearning Objective: Students will be able to understand and apply the concept of gradient descent, recognizing how the behavior of the derivative guides the iterative process of finding the function's minimum. They will be able to articulate how gradient descent adapts guesses towards optimal values and the significance of the derivative in this context.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function and its derivative\ndef f(x):\n    return x**2 - 4*x + 4\n\ndef df(x):\n    return 2*x - 4\n\n# Create x values\nx = np.linspace(-2, 6, 400)\ny = f(x)\ndy = df(x)\n\n# Initial guess\ntheta = 1.5\nlearning_rate = 0.1\niterations = 10\n\n# Prepare the figure\nplt.figure(figsize=(10, 6))\nplt.plot(x, y, label='Function $f(x)$', color='blue')\nplt.plot(x, dy, label=\"Derivative $f'(x)$\", color='orange', linestyle='dashed')\n\n# Points where the derivative is zero\ntheta_optimal = 2\nplt.scatter(theta_optimal, f(theta_optimal), color='red', zorder=5)\nplt.axhline(0, color='gray', lw=0.5, ls='dotted')\nplt.axvline(theta_optimal, color='red', lw=1, ls='dotted', label='Optimal $\\theta$')\nplt.text(theta_optimal + 0.2, f(theta_optimal), 'Optimal $\\theta$', fontsize=10, color='red')\n\n# Iterative gradient descent process\nfor _ in range(iterations):\n    plt.scatter(theta, f(theta), color='green', zorder=5)\n    plt.annotate(f'Guess: ${theta:.2f}$', xy=(theta, f(theta)), xytext=(theta + 0.5, f(theta) + 1),\n                 arrowprops=dict(facecolor='black', arrowstyle='->'))\n\n    # Get the derivative and update theta\n    gradient = df(theta)\n    plt.arrow(theta, f(theta), -learning_rate * gradient, 0,\n              head_width=0.3, head_length=0.5, fc='black', ec='black')\n    \n    # Update theta\n    theta -= learning_rate * gradient\n\nplt.title('Gradient Descent Visualization')\nplt.xlabel('$\\theta$')\nplt.ylabel('$f(\\theta)$')\nplt.legend()\nplt.grid()\nplt.ylim(-1, 5)\n```"
}