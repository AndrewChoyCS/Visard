{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Create a visualization to explain the concept of gradient descent as an iterative optimization technique for minimizing a loss function.** The goal of the visualization is to illustrate how gradient descent works by showing the relationship between the current guess of \\(\\theta\\), the derivative at that point, and the subsequent adjustments made to approach the optimal value. Specifically, it should clarify the sequential nature of the updates based on whether the guess undershoots or overshoots the minimum.\n\nTo achieve this, consider using a combination of line graphs to depict the loss function and its derivative alongside arrows indicating movements of \\(\\theta\\) based on the derivative's sign. Highlight points where the derivative equals zero in a distinct color to mark potential minima. This visual structure aids in understanding how each guess influences the next, emphasizing the cause-effect relationship inherent in gradient descent.\n\n**Objective:** Enable students to deeply understand the process of gradient descent, including how the signs of derivatives inform adjustments to guesses, thereby reinforcing their grasp of iterative optimization in complex models. The visualization will emphasize the dynamic nature of this process, helping learners visualize both relationships and sequences critical to effectively applying gradient descent in various computational models.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Loss function and its derivative\ndef loss_function(theta):\n    return (theta - 2) ** 2\n\ndef derivative_loss(theta):\n    return 2 * (theta - 2)\n\n# Parameters\ntheta_values = np.linspace(-2, 6, 100)\nloss_values = loss_function(theta_values)\nderivative_values = derivative_loss(theta_values)\n\n# Gradient descent parameters\ntheta_current = 4  # Starting point\nlearning_rate = 0.1\niterations = 5\n\n# Plot loss function and its derivative\nplt.figure(figsize=(12, 6))\nplt.plot(theta_values, loss_values, label='Loss Function', color='blue', linewidth=2)\nplt.plot(theta_values, derivative_values, label='Derivative of Loss', color='orange', linestyle='--', linewidth=1)\n\n# Highlighting the minimum\nplt.plot(2, loss_function(2), 'ro', label='Minimum (2, 0)', markersize=8)\n\n# Gradient descent iterations\nfor i in range(iterations):\n    plt.arrow(theta_current, loss_function(theta_current), -derivative_loss(theta_current) * learning_rate, \n              0, head_width=0.5, head_length=0.5, fc='black', ec='black')\n    \n    # Update theta\n    theta_current -= learning_rate * derivative_loss(theta_current)\n\n# Annotations for current guess and updates\nplt.text(4, loss_function(4) + 1, r'Current $\\theta$', fontsize=10, color='black')\nplt.text(2, 1, r'Minimum: $L(\\theta)=0$', fontsize=10, color='red')\n\n# Labels and legends\nplt.title('Gradient Descent: Minimizing the Loss Function')\nplt.xlabel('Theta (\u03b8)')\nplt.ylabel('Loss (L)')\nplt.axhline(0, color='gray', linewidth=0.5, linestyle='--')\nplt.axvline(2, color='gray', linewidth=0.5, linestyle='--')\nplt.legend()\nplt.grid()\n```"
}