{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Create a visualization to explain the concept of gradient descent and its iterative process of finding the minimum of a cost function.** The visualization should illustrate how the algorithm adjusts its guesses for the parameter \u03b8 based on the slope of the cost function, demonstrating the relationship between the derivative's sign and the direction of adjustment. Use a line graph for the cost function, with a separate plot for its derivative, clearly marking points where the derivative equals zero. Additionally, include arrows or annotations to guide the viewer through the iterative adjustments based on undershooting or overshooting the optimal value.\n\nThe key educational outcomes expected are a clearer understanding of how gradient descent progresses toward a function's minimum and the significance of the derivative's value at each guess. By visualizing the relationships between the cost function, its derivative, and the iterative nature of the adjustments, learners can better grasp the mechanics of optimization in more complex models. This visual aid helps illuminate the cause-and-effect relationships inherent in the process, enhancing comprehension of these pivotal concepts in machine learning. \n\n**Objective:** Foster a deep understanding of how gradient descent operates as an iterative optimization technique, highlighting the importance of derivatives in determining the path to the minimum of a cost function.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create cost function and its derivative\ndef cost_function(theta):\n    return (theta - 2) ** 2\n\ndef derivative_function(theta):\n    return 2 * (theta - 2)\n\n# Generate theta values\ntheta_values = np.linspace(-1, 5, 100)\ncost_values = cost_function(theta_values)\nderivative_values = derivative_function(theta_values)\n\n# Setup plots\nfig, axs = plt.subplots(2, 1, figsize=(10, 10))\n\n# Plot cost function\naxs[0].plot(theta_values, cost_values, label='Cost Function', color='blue')\naxs[0].set_title('Cost Function')\naxs[0].set_xlabel('Theta (\u03b8)')\naxs[0].set_ylabel('Cost')\naxs[0].axhline(0, color='black', lw=0.5, ls='--')\naxs[0].axvline(2, color='red', lw=1, ls='--', label='Minimum at \u03b8=2')\naxs[0].annotate('Minimum', xy=(2, cost_function(2)), xytext=(2.5, 10),\n                 arrowprops=dict(facecolor='black', shrink=0.05))\naxs[0].legend()\naxs[0].grid()\n\n# Plot derivative function\naxs[1].plot(theta_values, derivative_values, label='Derivative', color='orange')\naxs[1].set_title('Derivative of the Cost Function')\naxs[1].set_xlabel('Theta (\u03b8)')\naxs[1].set_ylabel('Derivative')\naxs[1].axhline(0, color='black', lw=0.5, ls='--')\naxs[1].axvline(2, color='red', lw=1, ls='--', label='Zero Derivative at \u03b8=2')\naxs[1].annotate('Zero Derivative', xy=(2, 0), xytext=(1.5, 10),\n                 arrowprops=dict(facecolor='black', shrink=0.05))\naxs[1].legend()\naxs[1].grid()\n\n# Add arrow annotations for gradient descent steps\ninitial_theta = 4\nlearning_rate = 0.1\ntheta_values = [initial_theta]\ncost_history = [cost_function(initial_theta)]\n\nfor _ in range(5):\n    der_value = derivative_function(theta_values[-1])\n    next_theta = theta_values[-1] - learning_rate * der_value\n    theta_values.append(next_theta)\n    cost_history.append(cost_function(next_theta))\n    if der_value > 0:\n        axs[0].annotate('', xy=(next_theta, cost_function(next_theta)), \n                        xytext=(theta_values[-2], cost_history[-2]),\n                        arrowprops=dict(arrowstyle='->', color='green', lw=1))\n    else:\n        axs[0].annotate('', xy=(next_theta, cost_function(next_theta)), \n                        xytext=(theta_values[-2], cost_history[-2]),\n                        arrowprops=dict(arrowstyle='->', color='red', lw=1))\n\nplt.tight_layout()\n```"
}