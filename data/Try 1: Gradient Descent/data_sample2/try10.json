{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Create a visualization to explain the concept of gradient descent as an iterative optimization technique for minimizing a function.** This visualization should illustrate the relationship between the function, its derivative, and how the guessing process leads us to the minimum value of \\(\\theta\\). It should clearly show how the sign of the derivative indicates whether our current guess for \\(\\theta\\) is too high or too low and how this informs the next guess. \n\nAn effective style for this visualization could be a dual graph layout: one graph depicting the function and its minimum, and another graph showing the derivate's behavior across the same domain. Use color coding to highlight sections where the derivative is negative (indicating we need to increase \\(\\theta\\)) and sections where it is positive (indicating we need to decrease \\(\\theta\\)). This will help learners visualize the cause-effect relationship inherent in using gradient descent, encouraging a deeper understanding of how iterative guessing leads to convergence on the minimum value.\n\n**Learning Objective:** By interacting with this visualization, learners will develop a crucial understanding of the gradient descent method, enabling them to articulate how an iterative approach to optimization takes advantage of derivative insights to efficiently find minima in complex functions.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function and its derivative\ndef f(theta):\n    return (theta - 3)**2 + 1\n\ndef df(theta):\n    return 2 * (theta - 3)\n\n# Create a range of theta values\ntheta_values = np.linspace(-1, 7, 400)\nfunction_values = f(theta_values)\nderivative_values = df(theta_values)\n\n# Setup the figure and axes\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10), sharex=True)\n\n# Plot the function\nax1.plot(theta_values, function_values, color='royalblue', label='f(\u03b8) = (\u03b8 - 3)\u00b2 + 1')\nax1.axhline(1, color='gray', linestyle='--')\nax1.scatter(3, 1, color='red', zorder=5)  # Minimum point\nax1.annotate('Minimum', xy=(3, 1), xytext=(4, 5), arrowprops=dict(facecolor='black', arrowstyle='->'))\nax1.set_title('Function')\nax1.set_ylabel('f(\u03b8)')\nax1.grid()\nax1.legend()\n\n# Highlight areas for derivative\nax2.plot(theta_values, derivative_values, color='gray', label=\"f'(\u03b8)\")\nax2.fill_between(theta_values, derivative_values, 0, where=(derivative_values < 0), color='lightcoral', alpha=0.5, label='Increase \u03b8')\nax2.fill_between(theta_values, derivative_values, 0, where=(derivative_values > 0), color='lightgreen', alpha=0.5, label='Decrease \u03b8')\nax2.axhline(0, color='black', linewidth=1, linestyle='--')\nax2.set_title(\"Derivative of the Function\")\nax2.set_xlabel('\u03b8')\nax2.set_ylabel(\"f'(\u03b8)\")\nax2.grid()\nax2.legend()\n\nplt.tight_layout()\n```"
}