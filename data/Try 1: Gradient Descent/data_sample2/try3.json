{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Query:** Create a visualization to explain the gradient descent process for optimizing a function's parameters, particularly how to iteratively refine guesses for the optimal value based on the sign of the derivative. \n\nThe goal of the visualization is to clarify the relationship between the value of \u03b8, its corresponding loss function, and the behavior of the derivative at each iteration. By illustrating the scenario where the initial guess for \u03b8 is either too low or too high, the visual should demonstrate how to adjust the guess based on whether the derivative is negative or positive. This can be effectively represented through a series of graphs that showcase the loss function's shape, the derivatives, and the progressive steps taken towards the minimum value. \n\nThe educational outcomes expected from this visualization include a deeper understanding of how the gradient descent algorithm operates in a conceptual sense and the significance of the derivative in guiding optimization. By focusing on relationships and sequences, the visualization will integrate dynamic labels and arrows to show movement towards the optimal solution, making the iterative process of gradient descent concrete and accessible.\n\n**Objective:** Students will be able to understand and articulate the iterative nature of gradient descent, recognizing how adjustments based on the derivative inform the process of optimizing loss functions in complex models.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Loss function: Quadratic function\ndef loss_function(theta):\n    return (theta - 3) ** 2\n\n# Derivative of the loss function\ndef derivative(theta):\n    return 2 * (theta - 3)\n\n# Set up the figure and axes\nfig, axs = plt.subplots(1, 3, figsize=(18, 5))\ntheta_values = np.linspace(-1, 7, 400)\nloss_values = loss_function(theta_values)\n\n# Plot the loss function\naxs[0].plot(theta_values, loss_values, label='Loss Function: $(\u03b8 - 3)^2$', color='blue')\naxs[0].set_title('Loss Function')\naxs[0].set_xlabel('\u03b8')\naxs[0].set_ylabel('Loss')\naxs[0].axhline(0, color='black', lw=0.5, ls='--')\naxs[0].axvline(3, color='red', lw=0.5, ls='--', label='Optimal \u03b8 = 3')\naxs[0].legend()\naxs[0].grid()\n\n# Initial guesses for theta\ninitial_guesses = [-1, 5]\nlearning_rate = 0.5\niterations = 5\n\n# Define the colors for the initial guesses\ncolors = ['orange', 'green']\n\nfor i, theta in enumerate(initial_guesses):\n    axs[1].plot(theta_values, loss_function(theta_values), color='blue', alpha=0.5)\n    path = [theta]\n    \n    for _ in range(iterations):\n        gradient = derivative(theta)\n        theta = theta - learning_rate * gradient\n        path.append(theta)\n\n    # Plot the path of \u03b8\n    axs[1].plot(path, loss_function(np.array(path)), marker='o', color=colors[i], label=f'Initial \u03b8 = {initial_guesses[i]}')\n    axs[1].text(initial_guesses[i], loss_function(initial_guesses[i]), f'Start: {initial_guesses[i]}', fontsize=10, verticalalignment='bottom')\n\naxs[1].set_title('Gradient Descent Path')\naxs[1].set_xlabel('\u03b8')\naxs[1].set_ylabel('Loss')\naxs[1].axhline(0, color='black', lw=0.5, ls='--')\naxs[1].axvline(3, color='red', lw=0.5, ls='--', label='Optimal \u03b8 = 3')\naxs[1].legend()\naxs[1].grid()\n\n# Plotting the derivative\nfor i, theta in enumerate(initial_guesses):\n    derivative_values = derivative(theta_values)\n\n    axs[2].plot(theta_values, derivative_values, color='purple', label='Derivative', alpha=0.5)\n    axs[2].scatter(path, derivative(np.array(path)), color=colors[i], zorder=5)\n    axs[2].text(path[-1], derivative(path[-1]), f'Derivative at \u03b8={round(path[-1], 2)}', fontsize=10, verticalalignment='bottom')\n\naxs[2].set_title('Derivative of Loss Function')\naxs[2].set_xlabel('\u03b8')\naxs[2].set_ylabel('Derivative')\naxs[2].axhline(0, color='black', lw=0.5, ls='--')\naxs[2].axvline(3, color='red', lw=0.5, ls='--', label='Optimal \u03b8 = 3')\naxs[2].legend()\naxs[2].grid()\n\nplt.tight_layout()\n```"
}