{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Create a visualization to explain the concept of gradient descent as an iterative optimization technique in locating the minimum value of a function.** The visualization should illustrate how a function's minimum can be approached through successive approximations based on the sign of the derivative. Key elements to depict include the function curve, its derivative, points of overshooting and undershooting, and how the guess for the optimal value adjusts based on the derivative's positivity or negativity.\n\nThe goal of this visualization is to clarify the relationship between a function and its derivative, particularly how their interaction guides the iterative process of adjusting our guess for the minimizing parameter, \\(\\hat{\\theta}\\). Use a dynamic line graph style that shows the function and its derivative with labeled gradients to provide a clear picture of how guesses adjust left or right based on these signals.\n\nThis visual aids in deepening understanding by highlighting cause-effect relationships in the gradient descent method, allowing learners to intuitively grasp how changes in their guesses directly correlate with the function's behavior. \n\n**Learning Objective:** By the end of this visualization, learners will be able to articulate how an iterative algorithm can navigate towards the minimum of a complex function, understanding the principles driving the adjustments in their guesses based on derivative feedback.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Function definitions\ndef f(x):\n    return (x - 2) ** 2 + 1\n\ndef f_prime(x):\n    return 2 * (x - 2)\n\n# Set up the figure and axis\nx = np.linspace(-1, 5, 400)\ny = f(x)\ny_prime = f_prime(x)\n\n# Initial guess\ntheta = 4.0\nlearning_rate = 0.1\niteration_steps = [theta]\n\n# Gradient descent iterations\nfor _ in range(10):\n    grad = f_prime(theta)\n    theta -= learning_rate * grad\n    iteration_steps.append(theta)\n\n# Create the plot\nplt.figure(figsize=(12, 6))\n\n# Plot the function\nplt.subplot(1, 2, 1)\nplt.plot(x, y, label='f(x)', color='blue')\nplt.scatter(iteration_steps, [f(t) for t in iteration_steps], color='red', zorder=5)\nplt.title(\"Gradient Descent Approaching Minimum\")\nplt.xlabel(\"\u03b8 (Parameter)\")\nplt.ylabel(\"f(\u03b8)\")\nplt.axhline(0, color='black', linewidth=0.5, ls='--')\nplt.axvline(2, color='black', linewidth=0.5, ls='--', label='Local Minimum')\nplt.legend()\nplt.grid()\n\n# Plot the derivative\nplt.subplot(1, 2, 2)\nplt.plot(x, y_prime, label=\"f'(x)\", color='orange')\nplt.title(\"Derivative of the Function\")\nplt.xlabel(\"\u03b8 (Parameter)\")\nplt.ylabel(\"f'(\u03b8)\")\nplt.axhline(0, color='black', linewidth=0.5, ls='--')\nplt.axvline(2, color='black', linewidth=0.5, ls='--', label='Zero Derivative (Minima)')\nplt.legend()\nplt.grid()\n\n# Add arrows to indicate overshooting and undershooting\nfor i in range(len(iteration_steps)-1):\n    plt.arrow(iteration_steps[i], f(iteration_steps[i]), \n              iteration_steps[i+1] - iteration_steps[i], \n              f(iteration_steps[i+1]) - f(iteration_steps[i]), \n              head_width=0.2, head_length=0.3, fc='red', ec='red')\n\n# Annotations for each guess on the first plot\nfor i, t in enumerate(iteration_steps):\n    plt.annotate(f\"\u03b8={t:.2f}\", (t, f(t)), textcoords=\"offset points\", \n                 xytext=(0, 10), ha='center', fontsize=8)\n\n```"
}