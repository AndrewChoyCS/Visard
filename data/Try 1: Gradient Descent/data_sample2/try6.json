{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Create a visualization to explain the iterative process of gradient descent in finding the minimum of a loss function.** The goal of this visualization is to depict how an algorithm makes successive guesses for the optimal parameter value \\(\\hat{\\theta}\\) based on the outcomes of prior estimates. It should clarify the relationship between a guess's position on the loss function's curve and the behavior of its derivative\u2014highlighting when to adjust guesses up or down based on the signs of the derivative. \n\nThis visualization could take the form of a dynamic diagram showing a graphical representation of the loss function alongside a plot of its derivative. Arrows could indicate movement to the right or left, based on whether the guess is lower or higher than the optimal \\(\\hat{\\theta}\\). By illustrating these relationships, the visual will aid in understanding the mechanics of gradient descent, making the iterative nature of the optimization process clear.\n\n**Learning Objective:** Students will deeply understand how to navigate the optimization landscape using gradient descent, enabling them to conceptualize how different guessing strategies relate to gradient values leading to the minimization of a loss function.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Loss function: Quadratic function\ndef loss_function(theta):\n    return (theta - 2) ** 2\n\n# Derivative of the loss function\ndef derivative(theta):\n    return 2 * (theta - 2)\n\n# Set initial parameters\ntheta_values = np.linspace(-1, 5, 100)\nloss_values = loss_function(theta_values)\n\n# Gradient descent parameters\ninitial_theta = 4.0\nlearning_rate = 0.1\niterations = 5\n\n# Prepare figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot loss function\nax.plot(theta_values, loss_values, label='Loss Function', color='blue', linewidth=2)\nax.axhline(0, color='gray', linewidth=0.5, linestyle='--')\nax.axvline(2, color='red', linestyle='--', label='Optimal $\\hat{\\\\theta}$ = 2')\n\n# Iterative process of gradient descent\ntheta_current = initial_theta\nfor i in range(iterations):\n    loss_current = loss_function(theta_current)\n    gradient_current = derivative(theta_current)\n    \n    # Update the current theta based on the gradient\n    theta_next = theta_current - learning_rate * gradient_current\n    \n    # Arrow for showing movement\n    ax.annotate('', xy=(theta_next, loss_function(theta_next)), xytext=(theta_current, loss_current),\n                arrowprops=dict(facecolor='orange', shrink=0.05, connectionstyle='arc3,rad=0.2'))\n\n    # Update theta for next iteration\n    theta_current = theta_next\n\n# Labels and title\nax.set_title('Gradient Descent Optimization Process', fontsize=16)\nax.set_xlabel('Parameter $\\hat{\\\\theta}$', fontsize=14)\nax.set_ylabel('Loss', fontsize=14)\nax.legend()\nax.grid()\n\n# Display plot\nplt.contour(theta_values, loss_values, levels=[0], colors='black', linestyles='dashed')\n```"
}