{
    "data": "One thing to note, however, is that the techniques we used above can only be applied if we make some big assumptions. For the calculus approach, we assumed that the loss function was differentiable at all points and that we could algebraically solve for the zero points of the derivative; for the geometric approach, OLS *only* applies when using a linear model with MSE loss. What happens when we have more complex models with different, more complex loss functions? The techniques we've learned so far will not work, so we need a new optimization technique: **gradient descent**. Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function? Let's consider an arbitrary function. Our goal is to find the value of $x$ that minimizes this function.```def arbitrary(x): return (x**4 - 15*x**3 + 80*x**2 - 180*x + 144)/10 It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green. > **BIG IDEA**: use an iterative algorithm to numerically compute the minimum of the loss.Looking at the function across this domain, it is clear that the function's minimum value occurs around $\\theta = 5.3$. Let's pretend for a moment that we *couldn't* see the full view of the cost function. How would we guess the value of $\\theta$ that minimizes the function?  It turns out that the first derivative of the function can give us a clue. In the graph below, the function and its derivative are plotted, with points where the derivative is equal to 0 plotted in light green.Say we make a guess for the minimizing value of $\\theta$. Remember that we read plots from left to right, and assume that our starting $\\theta$ value is to the left of the optimal $\\hat{\\theta}$. If the guess undershoots the true minimizing value \u2013 our guess for $\\theta$ is lower than the value of the $\\hat{\\theta}$ that minimizes the function \u2013 the derivative will be **negative**. This means that if we increase $\\theta$ (move further to the right), then we **can decrease** our loss function further. If this guess overshoots the true minimizing value, the derivative will be positive, implying the converse. We can use this pattern to help formulate our next guess for the optimal $\\hat{\\theta}$. Consider the case where we've undershot $\\theta$ by guessing too low of a value. We'll want our next guess to be greater in value than our previous guess \u2013 that is, we want to shift our guess to the right. You can think of this as following the slope downhill to the function's minimum value.If we've overshot $\\hat{\\theta}$ by guessing too high of a value, we'll want our next guess to be lower in value \u2013 we want to shift our guess for $\\hat{\\theta}$ to the left.",
    "goal": "**Create a visualization to explain the concept of gradient descent as an iterative optimization technique for minimizing loss functions.** The goal of this visualization is to illustrate how gradient descent works by depicting the relationships between the function, its derivative, and the process of adjusting guesses for the optimal minimizing value, $\\hat{\\theta}$. \n\nThis visualization should clearly show how starting guesses (left of $\\hat{\\theta}$) lead to adjustments based on the sign of the derivative\u2014negative for undershooting (indicating a shift to the right) and positive for overshooting (indicating a shift to the left). A suitable visualization style could be a series of graphs or a dynamic illustration\u2014perhaps an animated chart showing the function's curve, its derivative, and overlaid arrows indicating the movement of guesses. \n\nThese visual aids will enhance understanding by illustrating the cause-effect relationships inherent in the gradient descent process, allowing learners to see how each guess influences the subsequent step toward the minimum. \n\n**Learning Objective:** Students will be able to explain and illustrate the iterative process of gradient descent in optimizing model parameters by interpreting how the sign of the derivative informs the direction of the next guess, thereby deepening their grasp of optimization in complex models.",
    "code": "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Set up the figure and axis\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Define the function and its derivative\ndef f(x):\n    return (x - 2) ** 2\n\ndef f_derivative(x):\n    return 2 * (x - 2)\n\n# Create a range of x values\nx = np.linspace(0, 5, 100)\ny = f(x)\n\n# Calculate the derivative values\ndy = f_derivative(x)\n\n# Plot the function\nax.plot(x, y, label='Loss Function: $f(x) = (x - 2)^2$', color='blue')\n\n# Add the title and labels\nax.set_title('Gradient Descent: Iterative Optimization')\nax.set_xlabel('Parameter Value ($\\\\theta$)')\nax.set_ylabel('Loss Value ($f(\\\\theta)$)')\nax.axhline(0, color='black', lw=0.5, ls='--')\nax.axvline(2, color='red', lw=0.5, ls='--', label='Optimal Value $\\\\hat{\\\\theta} = 2$')\n\n# Initial guesses\ninitial_guesses = [0.5, 1.5, 2.5, 3.5]\ncurrent_positions = initial_guesses.copy()\n\n# Plot the initial guesses and arrows\nfor i, pos in enumerate(current_positions):\n    ax.plot(pos, f(pos), 'ro')\n    if pos < 2:\n        ax.arrow(pos, f(pos), 0.5, f_derivative(pos)*0.3, head_width=0.1, head_length=0.2, fc='green', ec='green')\n    else:\n        ax.arrow(pos, f(pos), -0.5, f_derivative(pos)*-0.3, head_width=0.1, head_length=0.2, fc='orange', ec='orange')\n\n# Annotation\nfor i, pos in enumerate(current_positions):\n    ax.annotate(f'Guess {i+1}', (pos, f(pos)+0.5), textcoords=\"offset points\", xytext=(0,10), ha='center')\n\n# Add legend\nax.legend()\n```"
}